services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: test-vacation-db
    environment:
      POSTGRES_DB: project_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - vacation-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Django Website (from Docker Hub)
  django-website:
    image: al7koz/vacation-django:latest
    container_name: test-django-website
    environment:
      DB_NAME: project_db
      DB_USER: postgres
      DB_PASSWORD: 1234
      DB_HOST: database
      DB_PORT: 5432
      DEBUG: True
      SECRET_KEY: django-secret-key-for-testing
      ALLOWED_HOSTS: localhost,127.0.0.1,0.0.0.0,django-website
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8000:8000"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - vacation-network
    restart: unless-stopped
    # Override the entrypoint and command to force development mode
    entrypoint: ["/bin/bash", "-c"]
    command: ["python manage.py migrate && python manage.py runserver 0.0.0.0:8000"]

  # Dashboard (Flask + React from Docker Hub)
  dashboard:
    image: al7koz/vacation-dashboard:latest
    container_name: test-dashboard
    environment:
      DB_NAME: project_db
      DB_USER: postgres
      DB_PASSWORD: 1234
      DB_HOST: database
      DB_PORT: 5432
      JWT_SECRET_KEY: flask-jwt-secret-key-for-testing
      FLASK_ENV: development
    ports:
      - "3000:80"  # React Frontend
      - "5001:5001"  # Flask Backend API
    depends_on:
      database:
        condition: service_healthy
    networks:
      - vacation-network
    restart: unless-stopped

volumes:
  postgres_data:
  static_volume:
  media_volume:

networks:
  vacation-network:
    driver: bridge
